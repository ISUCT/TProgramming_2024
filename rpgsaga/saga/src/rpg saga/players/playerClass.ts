import { Weapon } from "../weapons/weaponClass";

export abstract class Player {
  _alive: boolean;
  _silence: boolean;
  _debufflist: any[];
  _kdlist: any[];
  _rpgClass: string;
  _name: string;
  _healthPoints: number;
  _weaponOfPerson: Weapon;
  _strength: number;
  _agility: number;
  _intelligence: number;
  constructor(
    alive: boolean,
    silence: boolean,
    debufflist = [],
    kdlist = [0,0],
    rpgClass: string,
    name: string,
    healthPoints: number,
    weaponOfPerson: Weapon,
    strength: number,
    agility: number,
    intelligence: number,
  ) {
    this._alive = alive;
    this._silence = silence;
    this._debufflist = debufflist;
    this._kdlist = kdlist;
    this._rpgClass = rpgClass;
    this._name = name;
    this._healthPoints = healthPoints;
    this._weaponOfPerson = weaponOfPerson;
    this._strength = strength;
    this._agility = agility;
    this._intelligence = intelligence;
  }
  public takeDamage(damage: number): void {

    if (damage == null) {
        console.log(`${this._name} –Ω–µ –ø–æ–ª—É—á–∞–ª —É—Ä–æ–Ω–∞`);
      }  else {
        this._healthPoints = this._healthPoints - damage;
        console.log(`${this._name} –≤–ø–∏—Ç–∞–ª ${damage} —É—Ä–æ–Ω–∞.`);
      }
  }
  protected getPassiveDebuff(damage: number, time: number){
    if (damage > 0 && time > 0) {
        this._debufflist.push([damage, time])
        console.log(`${this._name} –ø–æ–ª—É—á–∏–ª damage –¥–µ–±–∞—Ñ—Ñ`)
    }
  }
  public getDamagedByPassive(){
    let damage = 0;
    for (let i = 0; i< this._debufflist.length; i++){
        if (this._debufflist[i][1] > 0 && this._debufflist[i][0] > 0) {
            damage += this._debufflist[i][0]
            this._debufflist[i][1]--;
        } else {
            this._debufflist[i][0] = 0;
            this._debufflist[i][1] = 0;
        }
    }
    if (damage>0){
        this._healthPoints -= damage;
        console.log(`${this._name} –≤–ø–∏—Ç–∞–ª ${damage} –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ —É—Ä–æ–Ω–∞`)
    }
  }

  public checkLiveStatus(): void {
    if (this._healthPoints <= 0) {
      this._alive = false;
    } 
  }

  protected magicArrows(opp: Player): void{
        // –Ω–∞–Ω–æ—Å–∏—Ç –¥–∞–º–∞–≥, –∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–∞–Ω–æ—Å–∏—Ç –ø–æ 15 –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
    const damageGiven = Math.round(
        10*this._intelligence
    );
    console.log(`${this._name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–µ–ª—ã`);
    opp.takeDamage(damageGiven)
    opp.getPassiveDebuff(15, 5)
  }

  protected reloadCooldown(): void{
    for (let i = 0; i<this._kdlist.length; i++)
        this._kdlist[i]--
  }

  public set backHP(hp: number) {
    this._healthPoints = hp;
    return;
  }

  public playerRoundResults(): string {
    if (this._alive) {
      return `–ü–µ—Ä—Å–æ–Ω–∞–∂ ${this._name} –≤—ã–∂–∏–ª. –£ –Ω–µ–≥–æ ${this._healthPoints} —Ö–ø`;
    } else {
      return `üíÄ–ü–µ—Ä—Å–æ–Ω–∞–∂ ${this._name} —É–º–µ—Ä.üíÄ`;
    }
  }
  abstract attack(opp: Player): void;
}
